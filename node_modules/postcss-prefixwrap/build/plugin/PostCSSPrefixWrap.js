"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PLUGIN_NAME = void 0;
const CSSRuleWrapper_1 = require("../internal/domain/CSSRuleWrapper");
const FileIncludeList_1 = require("../internal/domain/FileIncludeList");
exports.PLUGIN_NAME = "postcss-prefixwrap";
class PostCSSPrefixWrap {
    blacklist;
    ignoredSelectors;
    isPrefixSelector;
    nested;
    prefixRootTags;
    prefixSelector;
    prefixTransform;
    whitelist;
    constructor(prefixSelector, options = {}) {
        this.blacklist = options.blacklist ?? [];
        this.ignoredSelectors = options.ignoredSelectors ?? [];
        this.isPrefixSelector = new RegExp(`^${prefixSelector.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")}$`);
        this.nested = options.nested ?? null;
        this.prefixRootTags = options.prefixRootTags ?? false;
        this.prefixSelector = prefixSelector;
        this.prefixTransform = options.prefixTransform ?? null;
        this.whitelist = options.whitelist ?? [];
    }
    prefixRoot(css) {
        if ((0, FileIncludeList_1.shouldIncludeFilePath)(css.source?.input?.file, this.whitelist, this.blacklist)) {
            css.walkRules((cssRule) => {
                if (cssRule?.parent?.type !== "rule") {
                    (0, CSSRuleWrapper_1.prefixWrapCSSRule)(cssRule, this.nested, this.ignoredSelectors, this.prefixSelector, this.prefixRootTags, this.prefixTransform);
                }
            });
        }
    }
    prefix() {
        return (css) => {
            this.prefixRoot(css);
        };
    }
}
exports.default = PostCSSPrefixWrap;
